const supabase = require('./supabase.config');

async function checkDatabaseStructure() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ Supabase...\n');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã brands
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã brands...');
    const { data: brandsData, error: brandsError } = await supabase
      .from('brands')
      .select('*')
      .limit(1);
    
    if (brandsError) {
      console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ brands –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', brandsError.message);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ brands —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:', Object.keys(brandsData[0] || {}));
    }
    
    console.log('\n');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã models
    console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã models...');
    const { data: modelsData, error: modelsError } = await supabase
      .from('models')
      .select('*')
      .limit(1);
    
    if (modelsError) {
      console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ models –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', modelsError.message);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ models —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:', Object.keys(modelsData[0] || {}));
    }
    
    console.log('\n');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã smartphones
    console.log('3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã smartphones...');
    const { data: smartphonesData, error: smartphonesError } = await supabase
      .from('smartphones')
      .select('*')
      .limit(1);
    
    if (smartphonesError) {
      console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ smartphones –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', smartphonesError.message);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ smartphones —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:', Object.keys(smartphonesData[0] || {}));
    }
    
    console.log('\n');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π
    console.log('4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏...');
    const { data: relationsData, error: relationsError } = await supabase
      .from('smartphones')
      .select(`
        id,
        name,
        brand_id,
        model_id,
        brands!inner(id, name),
        models!inner(id, name)
      `)
      .limit(1);
    
    if (relationsError) {
      console.error('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–≤—è–∑—è–º–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏:', relationsError.message);
    } else {
      console.log('‚úÖ –°–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      if (relationsData.length > 0) {
        const item = relationsData[0];
        console.log(`üì± –ü—Ä–∏–º–µ—Ä: ${item.name} -> –ë—Ä–µ–Ω–¥: ${item.brands?.name}, –ú–æ–¥–µ–ª—å: ${item.models?.name}`);
      }
    }
    
    console.log('\n');
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('5Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    const { count: brandsCount } = await supabase
      .from('brands')
      .select('*', { count: 'exact', head: true });
    
    const { count: modelsCount } = await supabase
      .from('models')
      .select('*', { count: 'exact', head: true });
    
    const { count: smartphonesCount } = await supabase
      .from('smartphones')
      .select('*', { count: 'exact', head: true });
    
    console.log(`üìä –ë—Ä–µ–Ω–¥–æ–≤: ${brandsCount || 0}`);
    console.log(`üìä –ú–æ–¥–µ–ª–µ–π: ${modelsCount || 0}`);
    console.log(`üìä –°–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤: ${smartphonesCount || 0}`);
    
    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    console.error('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkDatabaseStructure(); 