const supabase = require('./supabase.config');

async function testSupabaseConnection() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...\n');
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    const { data: testData, error: testError } = await supabase
      .from('brands')
      .select('count')
      .limit(1);
    
    if (testError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', testError.message);
      return;
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!\n');
    
    // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—Ä–µ–Ω–¥–æ–≤
    console.log('2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—Ä–µ–Ω–¥–æ–≤...');
    const { data: brands, error: brandsError } = await supabase
      .from('brands')
      .select('id, name');
    
    if (brandsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤:', brandsError.message);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –±—Ä–µ–Ω–¥–æ–≤: ${brands.length}`);
      console.log('üìã –°–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤:');
      brands.forEach(brand => {
        console.log(`   - ${brand.name} (ID: ${brand.id})`);
      });
    }
    
    console.log('\n');
    
    // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤
    console.log('3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤...');
    const { data: smartphones, error: smartphonesError } = await supabase
      .from('smartphones')
      .select('id, name, brand_id')
      .limit(5);
    
    if (smartphonesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤:', smartphonesError.message);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤: ${smartphones.length} (–ø–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 5)`);
      console.log('üì± –ü—Ä–∏–º–µ—Ä—ã —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤:');
      smartphones.forEach(phone => {
        console.log(`   - ${phone.name} (ID: ${phone.id}, Brand ID: ${phone.brand_id})`);
      });
    }
    
    console.log('\n');
    
    // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π
    console.log('4Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π...');
    const { data: models, error: modelsError } = await supabase
      .from('models')
      .select('id, name, brand_id')
      .limit(5);
    
    if (modelsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π:', modelsError.message);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: ${models.length} (–ø–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 5)`);
      console.log('üìã –ü—Ä–∏–º–µ—Ä—ã –º–æ–¥–µ–ª–µ–π:');
      models.forEach(model => {
        console.log(`   - ${model.name} (ID: ${model.id}, Brand ID: ${model.brand_id})`);
      });
    }
    
    console.log('\n');
    
    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
    console.log('5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏...');
    const { data: joinedData, error: joinError } = await supabase
      .from('smartphones')
      .select(`
        id,
        name,
        price,
        brands!inner(name),
        models!inner(name)
      `)
      .limit(3);
    
    if (joinError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–µ–π:', joinError.message);
    } else {
      console.log('‚úÖ –°–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      console.log('üîó –ü—Ä–∏–º–µ—Ä—ã —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:');
      joinedData.forEach(item => {
        console.log(`   - ${item.name} | –ë—Ä–µ–Ω–¥: ${item.brands?.name} | –ú–æ–¥–µ–ª—å: ${item.models?.name} | –¶–µ–Ω–∞: ${item.price}`);
      });
    }
    
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    console.error('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ supabase.config.js');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testSupabaseConnection(); 